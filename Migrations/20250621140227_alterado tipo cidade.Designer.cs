// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SenaiAPI.Contexto;

#nullable disable

namespace SenaiAPI.Migrations
{
    [DbContext(typeof(SenaiContext))]
    [Migration("20250621140227_alterado tipo cidade")]
    partial class alteradotipocidade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SenaiAPI.Entidades.Aluno", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<long>("ClasseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Classe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EscolaId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfessorId")
                        .HasColumnType("bigint");

                    b.Property<int>("Serie")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.HasIndex("ProfessorId")
                        .IsUnique();

                    b.ToTable("Classe");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Cidade")
                        .HasMaxLength(60)
                        .HasColumnType("integer");

                    b.Property<long>("EscolaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId")
                        .IsUnique();

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Escola", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("Escola");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Professor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EscolaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Aluno", b =>
                {
                    b.HasOne("SenaiAPI.Entidades.Classe", "Classe")
                        .WithMany("Alunos")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Classe", b =>
                {
                    b.HasOne("SenaiAPI.Entidades.Escola", "Escola")
                        .WithMany("Classes")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SenaiAPI.Entidades.Professor", "Professor")
                        .WithOne("Classe")
                        .HasForeignKey("SenaiAPI.Entidades.Classe", "ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Endereco", b =>
                {
                    b.HasOne("SenaiAPI.Entidades.Escola", "Escola")
                        .WithOne("Endereco")
                        .HasForeignKey("SenaiAPI.Entidades.Endereco", "EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Professor", b =>
                {
                    b.HasOne("SenaiAPI.Entidades.Escola", "Escola")
                        .WithMany("Professores")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Classe", b =>
                {
                    b.Navigation("Alunos");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Escola", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Professores");
                });

            modelBuilder.Entity("SenaiAPI.Entidades.Professor", b =>
                {
                    b.Navigation("Classe")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
